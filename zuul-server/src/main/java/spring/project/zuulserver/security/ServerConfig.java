package spring.project.zuulserver.security;import org.springframework.boot.web.servlet.FilterRegistrationBean;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.core.Ordered;import org.springframework.http.HttpMethod;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;import org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;import org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer;import org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;import org.springframework.security.oauth2.provider.token.store.JwtTokenStore;import org.springframework.web.cors.CorsConfiguration;import org.springframework.web.cors.CorsConfigurationSource;import org.springframework.web.cors.UrlBasedCorsConfigurationSource;import org.springframework.web.filter.CorsFilter;import java.util.Arrays;@Configuration@EnableResourceServerpublic class ServerConfig extends ResourceServerConfigurerAdapter {    String security = "/api/security/oauth/";    String users = "/api/users/";    String books = "/api/books/";    String details = "/api/details/";    String select = "select";    String get = "get/{id}";    @Override    public void configure(ResourceServerSecurityConfigurer resources) throws Exception {        resources.tokenStore(tokenStore());    }    @Override    public void configure(HttpSecurity http) throws Exception {        http.authorizeRequests()                .antMatchers(security + "**").permitAll()                .antMatchers(HttpMethod.GET, users + select, books + select, details + select).permitAll()                .antMatchers(HttpMethod.GET, users + get, books + get, details + get).hasAnyRole("ADMIN", "USER")                .antMatchers(users + "**", books + "**", details + "**").hasRole("ADMIN")                .anyRequest()                .authenticated()                .and()                .cors()                .configurationSource(corsConfigurationSource());    }    @Bean    public CorsConfigurationSource corsConfigurationSource() {        CorsConfiguration configuration = new CorsConfiguration();        configuration.setAllowedOrigins(Arrays.asList("*"));        configuration.setAllowedMethods(Arrays.asList("POST", "GET", "PUT", "DELETE", "OPTIONS"));        configuration.setAllowCredentials(true);        configuration.setAllowedHeaders(Arrays.asList("Authorization", "Content_Type"));        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();        source.registerCorsConfiguration("/**", configuration);        return source;    }    @Bean    public FilterRegistrationBean<CorsFilter> filterRegistrationBean() {        FilterRegistrationBean bean = new FilterRegistrationBean(                new CorsFilter(corsConfigurationSource())        );        bean.setOrder(Ordered.HIGHEST_PRECEDENCE);        return bean;    }    @Bean    public JwtTokenStore tokenStore() {        return new JwtTokenStore(accessTokenConverter());    }    @Bean    public JwtAccessTokenConverter accessTokenConverter() {        JwtAccessTokenConverter tokenConverter = new JwtAccessTokenConverter();        tokenConverter.setSigningKey("code-secret");        return tokenConverter;    }}