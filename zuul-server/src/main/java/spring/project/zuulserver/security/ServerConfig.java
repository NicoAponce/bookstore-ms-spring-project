package spring.project.zuulserver.security;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.http.HttpMethod;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;import org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;import org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer;import org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;import org.springframework.security.oauth2.provider.token.store.JwtTokenStore;@Configuration@EnableResourceServerpublic class ServerConfig extends ResourceServerConfigurerAdapter {    String security = "/api/security/oauth/";    String users = "/api/users/";    String books = "/api/books/";    String details = "/api/details/";    String select = "select";    String get = "get/{id}";    @Override    public void configure(ResourceServerSecurityConfigurer resources) throws Exception {        resources.tokenStore(tokenStore());    }    @Override    public void configure(HttpSecurity http) throws Exception {        http.authorizeRequests()                .antMatchers(security + "**").permitAll()                .antMatchers(HttpMethod.GET, users + select, books + select, details + select).permitAll()                .antMatchers(HttpMethod.GET, users + get, books + get, details + get).hasAnyRole("ADMIN", "USER")                .antMatchers(users + "**", books + "**", details + "**").hasRole("ADMIN")                .anyRequest().authenticated();    }    @Bean    public JwtTokenStore tokenStore() {        return new JwtTokenStore(accessTokenConverter());    }    @Bean    public JwtAccessTokenConverter accessTokenConverter() {        JwtAccessTokenConverter tokenConverter = new JwtAccessTokenConverter();        tokenConverter.setSigningKey("code-secret");        return tokenConverter;    }}